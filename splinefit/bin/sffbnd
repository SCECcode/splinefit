#!/usr/bin/env python
"""Perform BSpline fitting to boundary segments.
Usage: sffbnd <input> <output> -options=...

    input file      Pickle binary file to read (.p)
    output file     Pickle binary file to write (.p)

Fitting Options:
    -deg int         Degree of BSpline basis functions
    -reg float       Strength of regularization term
    -num_knots int   Number of knots to try
    -est_knots int   Automatically determine the number of knots to use 

Other Options:
    -help           Show help
    -savefig path   Save figures
    -showfig bool   Show figures (pauses application)"""
import sys
from splinefit import msh
import splinefit as sf
import numpy as np
import pickle
import matplotlib.pyplot as plt

def main():
    options = get_options(sys.argv)
    sf.options.check_options(sys.argv, options)

    data = pickle.load(open(options.input, 'rb'))

    bspline_curves = []
    print("Fitting BSpline curve to boundary segments")

    for num, bnd in enumerate(data.boundaries):
        min_degree = sf.bspline.min_degree(len(bnd.x), options.deg)
        if len(bnd.x) == 1:
            continue
        if options.est_knots:
            num_knots = estimate_knots(bnd.x, bnd.y, bnd.z)
        else:
            num_knots = options.num_knots
        print(" - Processing curve %d: degree = %d knots = %d " % 
               (num + 1, min_degree, num_knots))
        curve, res = fit_curve(bnd.x, bnd.y, bnd.z, min_degree, num_knots,
                               a=options.reg)

        curve.Pz = curve.Pz
        bsc = sf.bspline.Curve(curve.U, curve.p, curve.Px, curve.Py, curve.Pz)

        bsc.rwPx, bsc.rwPy, bsc.rwPz = sf.fitting.restore(curve.Px, curve.Py,
                curve.Pz, data.basis, data.mu, data.std, data.center, 
                data.theta)
        print("     Residual: %g " % res)
        bspline_curves.append(bsc)

        if options.savefig:
            savefig= "%s%d.png" % (options.savefig, num)
        else:
            savefig = ""

        make_plot(bspline_curves[-1], savefig=savefig,
                  showfig=options.showfig)

    
    data['bspline_curves'] = bspline_curves
    pickle.dump(data, open(options.output, 'wb'))
    print(" - Wrote: %s" % options.output)


def get_options(argv):
    """
    Get command line arguments.
    """

    options = sf.utils.Struct()
    if '-help' in argv:
        print(__doc__)
        exit()

    args = sf.options.get_options(argv)
    try:
        options.input = args['args'][0]
        options.output = args['args'][1]
    except:
        print(__doc__)
        exit(1)

    if '--deg' in args:
        options.deg = int(args['-deg'])
    else:
        options.deg = 2


    if '-reg' in args:
        options.reg = float(args['-reg'])
    else:
        options.reg = 1.0
    
    if '-showfig' in args:
        options.showfig = int(args['-showfig'])
    else:
        options.showfig = 0

    if '-savefig' in args:
        options.savefig = args['-savefig']
    else:
        options.savefig = ''

    if '-num_knots' in args:
        options.num_knots = int(args['-num_knots'])
    else:
        options.num_knots = 10

    if '-est_knots' in args:
        options.est_knots = int(args['-est_knots'])
    else:
        options.est_knots = 1

    return options


def estimate_knots(x, y, z):
    """
    Estimate the number of knots by calculating the length of the piecewise
    linear segment and the average spacing between segments.
    """

    t = sf.bspline.chords(x, y, z)

    diff = t[1:] - t[0:-1]

    return int(1 / np.mean(diff))


def fit_curve(x, y, z, p, m, a=0.5, tol=1e-6):
    """
    Fit BSpline curve using linear least square approximation with second
    derivative regularization.
    """

    xm = np.mean(x)
    ym = np.mean(y)
    zm = np.mean(z)
    t = sf.bspline.chords(x-xm, y-ym)
    U = sf.bspline.uniformknots(m, p)
    l = np.zeros((len(U) - p - 1,))
    wx = 1.0 + 0 * l
    wy = 1.0 + 0 * l
    wz = 1.0 + 0 * l
    Px, rx = sf.bspline.lsq(t, x - xm, U, p, tol=tol, s=0, a=a, w=wx)
    Py, ry = sf.bspline.lsq(t, y - ym, U, p, tol=tol, s=0, a=a, w=wy)
    Pz, rz = sf.bspline.lsq(t, z - zm, U, p, tol=tol, s=0, a=a, w=wz)

    curve = sf.utils.Struct()
    curve.x = x
    curve.y = y
    curve.z = z
    curve.Px = Px + xm
    curve.Py = Py + ym
    curve.Pz = Pz + zm
    curve.U = U
    curve.p = p
    curve.u = t
    curve.px = curve.Px[:-p]
    curve.py = curve.Py[:-p]
    curve.int_knot = m


    res = rx + ry + rz
    return curve, res

def evalcurve3(curve, num):
    u = np.linspace(curve.U[0], curve.U[-1], num)
    cx = sf.bspline.evalcurve(curve.p, curve.U, curve.Px, u)
    cy = sf.bspline.evalcurve(curve.p, curve.U, curve.Py, u)
    cz = sf.bspline.evalcurve(curve.p, curve.U, curve.Pz, u)
    return cx, cy, cz

def make_plot(curve, savefig="", showfig=0, npts=100, color=0):
    if not savefig and not showfig:
        return
    cx, cy, cz = evalcurve3(curve, npts)

    plt.clf()
    plt.plot(cx,cy,'C%d-'%color)
    plt.plot(curve.Px, curve.Py, 'C%do-'%color, alpha=0.3)

    if savefig:
        plt.savefig(savefig)

    if showfig:
        plt.show()

if __name__ == "__main__":
    main()

