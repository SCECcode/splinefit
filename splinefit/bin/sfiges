#!/usr/bin/env python
"""Export BSpline surface to IGES
Usage: sfiges <input> <output> -options=...


    input file      Pickle binary file to read (.p)
    output file     IGES file to write (.igs)

Options:
    -help           Show help

"""
import sys
import splinefit as sf
import numpy as np
import pickle


def main():

    options = get_options(sys.argv)
    sf.options.check_options(sys.argv, options)

    data = pickle.load(open(options.input, 'rb'))
    print("Exporting BSpline Surface to IGES")

    export_iges(options.output, data.bspline_surface, data['bspline_curves'])
    print("Wrote: %s" % options.output)


def get_options(argv):
    """
    Get command line arguments.
    """
    options = sf.utils.Struct()
    if '-help' in argv:
        print(__doc__)
        exit()

    args = sf.options.get_options(argv)
    try:
        options.input = args['args'][0]
        options.output = args['args'][1]
    except:
        print(__doc__)
        exit(1)

    return options


def export_iges(filename, surface, boundaries, verbose=False):
    """
    Export data to the IGES file format

    Args:
        surface: BSpline Surface representation
        boundaries: List of BSpline boundary representations
    """
    from pyiges.IGESCore import IGEStorage
    print(filename)
    system = IGEStorage()
    sf.iges.standard_iges_setup(system, filename)

    iges_surface = surface.iges()
    system.Commit(iges_surface)
    iges_curves = [curve.iges() for curve in boundaries]
    for curve in iges_curves:
        system.Commit(curve)

    boundary, bounded_surface = sf.iges.build_bounded_surface(iges_surface,
                                                           iges_curves,
                                                           system=system) 

    system.save(filename)



if __name__ == "__main__":
    main()

