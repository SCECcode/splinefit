#!/usr/bin/env python
"""Export gmsh script file. Unify .igs surfaces to produce conforming meshes and
crop them at sea level, if desired.

Usage: sfgeo <surf> (bbox)

    surf   A text file that contains a list of .igs files to load and join
           together.
    bbox   A text file that contains a list of bounding boxes for each of the
           surfaces. 

Options:
    -union bool Unify surfaces

"""
import sys
import splinefit as sf
import numpy as np

def main():


    options = get_options(sys.argv)
    sf.options.check_options(sys.argv, options)


    txt_load, num_files = load_files(options.input)

    if options.bbox_file:
        txt_bbox, labels = add_box(options.bbox_file)
    else:
        txt_bbox = ''
        labels = [i+1 for i in range(num_files)]

    if options.union:
        txt_union = union(labels)
    else:
        txt_union = ''

    print(txt_load + txt_bbox + txt_union)

def get_options(argv):
    """
    Get command line arguments.
    """

    options = sf.utils.Struct()
    if '-help' in argv:
        print(__doc__)
        exit()

    args = sf.options.get_options(argv)
    try:
        options.input = args['args'][0]
    except:
        print(__doc__)
        exit(1)

    try:
        options.bbox_file = args['args'][1]
    except:
        options.bbox_file = ''

    if '-union' in args:
        options.union = int(args['-union'])
    else:
        options.union = 0

    return options


def load_files(join_file):

    out = ""
    out += "SetFactory(\"OpenCASCADE\");\n"
    
    i = 0
    with open(join_file, "r") as fh:
        for line in fh:
            out += "a%d() = ShapeFromFile(\"%s\");\n" % (i+1, line.strip('\n')) 
            i += 1
    return out, i

def add_box(bbox_file):
    """
    Determine the common bounding box for a list of geometries. This box extends
    up to the sea level, z = 0. It is used for removing any part
    of the geometry that extends above the sea level. Any geometry that extends
    above sea level will get relabeled. 

    Args:
        bbox_file: File that contains bounding boxes: x y z xs ys zs, one box
            per line. (x, y, z) is the bottom, front, left corner, and xs, ys,
            zs is the scale in each direction.

    Returns:
        out: A string containing the .geo script for defining the box, and also
            using it for cutting.
        labels: A list of relabeled surfaces.

    """
    out = ""
    x0 = []
    y0 = []
    z0 = []
    x1 = []
    y1 = []
    z1 = []

    # Construct bounding box
    with open(bbox_file, "r") as fh:
        for line in fh:
            fields = line.split(' ')
            x0.append(float(fields[0]))
            y0.append(float(fields[1]))
            z0.append(float(fields[2]))
            x1.append(float(fields[3]) + x0[-1])
            y1.append(float(fields[4]) + y0[-1])
            z1.append(float(fields[5]) + z0[-1])


    bbox = "Box(1) = {%g, %g, %g, %g, %g, %g};\n" % (min(x0), min(y0), min(z0),
            max(x1) - min(x0), max(y1) - min(y0), -min(z0))

    # Relabel
    i = 1
    j = len(x0) + 1
    labels = []
    for zi in z1:
        if zi > 0:
            labels.append(j)
            j+= 1
        else:
            labels.append(i)
        i+= 1


    # Apply Boolean operation
    boolean = "BooleanIntersection{ " + " ".join(["Surface{%d};"%(i+1) for i in
        range(len(x0))]) + " Delete; }{ Volume{1}; Delete; }\n"

    out = bbox + boolean

    return out, labels

def union(surfaces):
    """
    Unify the surfaces such that a conforming mesh can be generated.

    Args:
        surfaces: A list of indices that specify the surfaces to join together

    Returns:
        A string that contains the gmsh syntax for joining the surfaces
            together.
    """

    boolean = "BooleanUnion { " + " ".join(["Surface{%d};"%(si) for si in
        surfaces[:-1]]) + " Delete; }{ Surface{%d}; Delete; }" % (surfaces[-1])

    return boolean



if __name__ == '__main__':
    main()
