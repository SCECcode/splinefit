#!/usr/bin/env python
"""Extract boundary from triangular surface mesh
Usage: sfbnd <input> <output> -options=...

    input file      gmsh mesh file to read (.msh)
    output file     Pickle binary file to write (.p)

Options:
    -savefig path   Save figures
    -showfig bool   Show figures (pauses application)"""

import sys
from splinefit import msh
import splinefit as sf
import numpy as np
import pickle


def main():

    options = get_options(sys.argv)
    sf.options.check_options(sys.argv, options)
    coords, tris = sf.msh.read(options.input)
    tris = msh.get_data(tris, num_members=3, index=1)
    active_nodes = sf.triangulation.active_nodes(coords, tris)
    print(active_nodes)
    check_num_tris(tris)
    print("Extracting boundary segments")
    
    bnd_edges, loops = get_boundary(coords, tris)
    make_plot(coords, tris, bnd_edges, options.savefig, options.showfig)
    
    data = sf.utils.Struct()
    data.active_nodes = active_nodes
    data.coords = coords
    data.tris = tris
    data.bnd_edges = bnd_edges
    data.loops = loops
    
    pickle.dump(data, open(options.output, 'wb'))
    print(" - Wrote: ", options.output)

def get_options(argv):
    """
    Get command line arguments.
    """
    options = sf.utils.Struct()
    if '-help' in argv:
        print(__doc__)
        exit()

    args = sf.options.get_options(argv)
    try:
        options.input = args['args'][0]
        options.output = args['args'][1]
    except:
        print(__doc__)
        exit(1)

    if '-showfig' in args:
        options.showfig = int(args['-showfig'])
    else:
        options.showfig = 0

    if '-savefig' in args:
        options.savefig = args['-savefig']
    else:
        options.savefig = ''

    return options


def check_num_tris(tris, min_elem=16):
    # Make sure that there are a sufficient number of elements to treat

    if tris.shape[0] <= min_elem:
        print("Not enough elements! Boundary extraction aborted.")
        exit(0)

def get_boundary(coords, tris):
    """
    Return the edges for the boundary with largest circumference, and a list of
    all boundaries found.

    """
    # Extract triangles from gmsh data and shift to zero indexing
    
    # Extract all edges
    edges = sf.triangulation.tris_to_edges(tris)
    edges_to_nodes = sf.triangulation.edges_to_nodes(edges)
    print(" - Total number of edges:", edges_to_nodes.shape[0])
    
    # Extract all boundary edges (unordered)
    count = sf.triangulation.edges_shared_tri_count(edges)
    bnd_edges = sf.triangulation.unordered_boundary_edges(edges_to_nodes, count,
            boundary_count=1)
    print(" - Total number of boundary edges:", bnd_edges.shape[0])
    
    # Order boundary edges so that boundary can be easily traversed
    nodes_to_edges = sf.triangulation.nodes_to_edges(bnd_edges)
    bnd_edges = sf.triangulation.boundary_loops(bnd_edges,nodes_to_edges)
    num_loops = max(bnd_edges[:,3])
    circ = []
    print(" - Number of boundary loops:", num_loops)
    loops = []
    for loop_id in range(1, num_loops+1):
        loop = sf.triangulation.get_loop(bnd_edges, loop_id)
        c = sf.triangulation.circumference(coords, loop)
        local_points = coords[bnd_edges[:,0], :]
        local_points = sf.triangulation.close_boundary(local_points)
        normals = sf.triangulation.normals2(local_points) 
        print(" - Loop ID: %d, Number of boundary edges: %d Circumference: %g "\
               %(
                loop_id,
                sum(bnd_edges[:,3] == loop_id),
                c))
        circ.append(c)
        loops.append({"outer": 0, 
                      "loop": sf.triangulation.get_loop(bnd_edges, loop_id + 1)})
    c_idx = np.argmax(circ)
    bnd_edges = sf.triangulation.get_loop(bnd_edges, c_idx + 1)
    loops[c_idx]["outer"] = 1
    return bnd_edges, loops

def make_plot(coords, tris, bnd_edges, savefig='', showfig=False):
    if not savefig and not showfig:
        return
    import matplotlib.pyplot as plt
    from mpl_toolkits.mplot3d import Axes3D

    xyz, mu, std = sf.fitting.normalize(coords[:,1:]) 
    
    pt_ids = bnd_edges[:,0]
    bnd_coords = xyz[pt_ids,:]
    bnd_coords = sf.triangulation.close_boundary(bnd_coords)

    fig, ax = sf.plot.mesh(xyz, tris)
    sf.plot.points(bnd_coords, ax=ax, style='k-')
    if savefig:
        plt.savefig(savefig)
    if showfig:
        plt.show()

if __name__ == '__main__':
    main()
